#
#= require jquery
#= require jquery_ujs
#= require leaflet
#= require leaflet.oms
#

class Map
  constructor: (id, options) ->
    @map = L.map(id).setView [51.505, -0.09], 13
    @map.addLayer L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
        maxZoom: 18)
    @oms = new OverlappingMarkerSpiderfier @map,
      keepSpiderfied: true
      nearbyDistance: 20

    @markers = []
    @lightIcon = L.Icon.Default;
    @darkIcon = L.Icon.Default.extend({options: {iconUrl: '<%= image_path "marker-dark.png" %>'}});


    @oms.addListener 'spiderfy', (markers) =>
      marker.setIcon new @lightIcon for marker in markers
      @map.closePopup()

    @oms.addListener 'unspiderfy', (markers) =>
      marker.setIcon new @darkIcon for marker in markers

    if options.markers?
      @addMarker m for m in options.markers

  addMarker: (options) =>
    marker = L.marker([options.lat, options.lng], { title: options.title, icon: new @darkIcon })

    @map.addLayer marker
    @oms.addMarker marker

    # if options.popup
    #   marker.bindPopup options.popup
    # else
    #   if options.url
    #     marker.on "click", (e) ->
    #       window.location.href = options.url if options.url?
    marker.bindPopup "<a class=\"popup-link\" href=\"#{options.url}\">#{options.title}</a><br />"
    @markers.push marker

  adjustToMarkers: ->
    bounds = new L.LatLngBounds(marker.getLatLng() for marker in @markers)

    @map.fitBounds bounds
    if @map.getZoom() > 12
      @map.setZoom 12


  createIcon: (options) ->
    # options ?= {}

    # icon = new OpenLayers.Icon(options.icon || "<%= asset_path('logo2.png') %>")
    # el   = $(icon.imageDiv)
    # el.append "<span>#{options.title}</span>" if options.title?
    # el.addClass "canteen-icon"
    # el.bind "click", (e) ->
    #   window.location.href = options.url if options.url?
    # icon

$ ->
  $(".map").each ->
    map = new Map $(@).data("map"), markers: $(@).data("markers")
    map.adjustToMarkers()

  # if history and history.pushState
  #   handleRemote = $.rails.handleRemote

  #   $.rails.handleRemote = (element) ->
  #     handleRemote.call @, element
  #     if element.data("push")
  #       history.pushState null, document.title, element.attr('href')

  #   $(window).bind "popstate", ->
  #     console.log arguments
  #     $.getScript location.href


    # $("[data-push]").each ->
    #   el = $(@)
    #   el.bind "click", (e) ->
    #     $.getScript el.attr('href')
    #     e.preventDefault()
