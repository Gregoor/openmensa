#
#= require jquery
#= require jquery_ujs
#= require leaflet
#= require leaflet.markercluster
#

class Map
  constructor: (id, options) ->
    @map = L.map(id, scrollWheelZoom: options.wheel).setView [51.505, -0.09], 13
    @map.addLayer L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
        maxZoom: 18)

    @cluster = new L.MarkerClusterGroup showCoverageOnHover: false
    @markers = []

  map: ->
    @map

  addMarker: (marker) =>
    @cluster.addLayer marker
    @markers.push marker

  setupMarkers: ->
    bounds = new L.LatLngBounds(marker.getLatLng() for marker in @markers)

    @map.addLayer(@cluster);
    @map.fitBounds bounds
    if @map.getZoom() > 17
      @map.setZoom 17

$ ->
  $(".map").each ->
    if $(@).data("markers")
      map = new Map 'map', wheel: false

      for m in $(@).data("markers")
        marker = L.marker([m.lat, m.lng], { title: m.title })
        marker.bindPopup "<a class=\"popup-link\" href=\"#{m.url}\">#{m.title}</a><br />"

        map.addMarker marker

    if $(@).data("sync")
      map = new Map 'map', wheel: true

      lat = $ $(@).data("lat")
      lng = $ $(@).data("lng")

      marker = L.marker [lat.attr('value'), lng.attr('value')], { draggable: true }
      marker.on "drag dragend", (marker) ->
        lat.attr 'value', marker.target.getLatLng().lat
        lng.attr 'value', marker.target.getLatLng().lng

      map.addMarker marker

    map?.setupMarkers()

  $('.alert a[data-dismiss]').each ->
    el = $ @
    el.bind 'click', (e) ->
      el.parent().fadeOut()

  $('.alert a[data-auto-dismiss]').each ->
    el = $ @
    timeout = parseInt el.data('auto-dismiss'), 10
    timeout = 4000 unless timeout? and !isNaN(timeout)
    setTimeout ->
      el.parent().fadeOut()
    , timeout
